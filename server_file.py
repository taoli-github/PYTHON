# _*_ coding:utf-8 _*_
import urllib.request as request
import os
import base64
import datetime
import urllib.parse as parser


def main():
    organization_id = 531

    # region 服务器链接信息
    pic_server_add = '116.62.58.203'
    pic_server_user = 'mbglyyser'
    pic_server_password = 'mbglp@ssw0rd'
    pic_dir = r'E:\apache-tomcat-7.0.52-ncdms\webapps\ncdms\upload\hbpCustomerMainHead'
    # endregion

    list_dir = os.listdir(r'G:\PersonPictures')

    for pid_path in list_dir:
        pic_full_path = r'G:/PersonPictures/' + pid_path

        pic_base64_str = ''
        s_time = datetime.datetime.now()
        with open(pic_full_path, 'rb') as f:
            pic_base64_str = base64.b64encode(f.read())

        #region base64str
        img_2 = ''
        # endregion

        data = {'image_base64_1': pic_base64_str, 'image_base64_2': img_2}
        url_params = parser.urlencode(data).encode('utf-8')
        url = 'http://ncd.bailingjk.com:20085/ncdms-third-web/faceRec/FaceCompare.html'

        req = request.Request(url, data=url_params)

        with request.urlopen(req) as f:
            similarity = f.read().decode('utf-8')
            e_time = datetime.datetime.now()

            print(pic_full_path + ':' + similarity + "    " + str((e_time-s_time).total_seconds()))


if __name__ == '__main__':
    main()
